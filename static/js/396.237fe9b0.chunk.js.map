{"version":3,"file":"static/js/396.237fe9b0.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","components/hooks/useSelectorHook.js","webpack://react-homework-template/./src/components/Form/Form.module.css?89ba","components/Form/Form.jsx","webpack://react-homework-template/./src/components/FilterName/FilterName.module.css?79e6","components/FilterName/FilterName.jsx","webpack://react-homework-template/./src/components/ListUpdate/ListUpdate.module.css?25f4","components/ListUpdate/ListUpdate.jsx","pages/Contacts.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { useSelector } from 'react-redux';\nimport {\n  getIsLoggedIn,\n  getUser,\n  getRefreshing,\n  getContacts,\n  getFilter,\n} from 'redux/auth/selectors';\n\nexport const useMySelectors = () => {\n  const isLoggedIn = useSelector(getIsLoggedIn);\n  const user = useSelector(getUser);\n  const isRefreshing = useSelector(getRefreshing);\n  const { items } = useSelector(getContacts);\n  const filterValue = useSelector(getFilter);\n\n  return {\n    isLoggedIn,\n    user,\n    isRefreshing,\n    items,\n    filterValue,\n  };\n};","// extracted by mini-css-extract-plugin\nexport default {\"label\":\"Form_label__8nx+5\",\"input\":\"Form_input__FTtTw\",\"form\":\"Form_form__e1yzW\",\"btn\":\"Form_btn__0ebGo\"};","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\nimport { contactsAPI } from 'redux/contactsThunk';\nimport { useMySelectors } from 'components/hooks';\nimport PropTypes from 'prop-types';\nimport css from './Form.module.css';\n\nfunction Form() {\n  const dispatch = useDispatch();\n  const { items } = useMySelectors();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  \n    const nameFormId = nanoid();\n    const numberFormId = nanoid();\n\n    const handleInput = event => {\n      const { name, value } = event.currentTarget;\n      switch (name) {\n        case 'name': setName(value);\n          break;\n        case 'number': setNumber(value);\n          break;\n        default:\n          console.log('щось пішло не так')\n          }\n    }\n\n     const handleSubmit = event => {\n      event.preventDefault();\n            const newContact = {\n      name,\n      number,\n      id: nanoid(),\n      }\n  if (items.find(contact => contact.name.includes(newContact.name))) {\n        return alert('ay, такий контакт вже існує')\n      }\n      dispatch(contactsAPI.addContactThunk(newContact))\n        \n          reset();\n    }\n    \n    const reset = () => {\n      setName('');\n      setNumber('');\n    }    \n\n    return (\n      <form onSubmit={handleSubmit} className={css.form}>\n      <label htmlFor={nameFormId} className={css.label}>\n        Name\n      <input\n      type=\"text\"\n       name=\"name\"\n      value={name}\n     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            className={css.input}\n        id={nameFormId}\n        onChange={handleInput}\n/>\n      </label>\n      <label htmlFor={numberFormId} className={css.label}>\n        Number\n        <input\n        type=\"tel\"\n         name=\"number\"\n         value={number}\n      pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n      title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            className={css.input}\n              id={numberFormId}\n          onChange={handleInput}\n/>\n      </label>\n        <button type=\"submit\" className={css.btn}>Add contact</button>\n               </form>)\n    }\n\n\nForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.number\n}\n\nexport default Form;","// extracted by mini-css-extract-plugin\nexport default {\"filter_label\":\"FilterName_filter_label__BtRXW\",\"input\":\"FilterName_input__ZEAzA\"};","import css from './FilterName.module.css';\nimport { useDispatch } from 'react-redux';\nimport { filter } from 'redux/myFilterSlice/myFilterSlice';\nimport { useMySelectors } from 'components/hooks';\n\n\nconst Filter = () => {\n    const {filterValue} = useMySelectors();\n    \n    const dispatch = useDispatch();\n    const changeFilter = (event) => dispatch(filter(event.currentTarget.value));\n\n       return (\n         <label className={css.filter_label}>\n          Find contacts by name \n            <input type=\"text\"\n                name=\"filter\"\n                value={filterValue}\n                onChange={changeFilter}\n                className={css.input}\n            />\n        </label>\n    )\n}\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ListUpdate_list__unpIe\",\"item\":\"ListUpdate_item__VXSfh\",\"listBtn\":\"ListUpdate_listBtn__BPhEl\",\"text\":\"ListUpdate_text__FZ-zv\"};","import css from './ListUpdate.module.css';\nimport { useMemo, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { contactsAPI } from 'redux/contactsThunk';\nimport { getContacts, getFilter } from 'redux/auth/selectors';\n\nconst ListUpdate = () => {\n    const dispatch = useDispatch();\n  const { items, isLoading, error } = useSelector(getContacts);\n  const filter = useSelector(getFilter)\n   useEffect(() => {\n        dispatch(contactsAPI.fetchContactsThunk());\n    }, [dispatch]);\n  const normalizedFilter = filter.toLowerCase();\n  \n  const filteredContacts = useMemo(() => {\n    if (items) { \n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter))\n  }\n},[normalizedFilter, items])\n    \n    return (\n        <div>\n            {isLoading && <h1>Loading...</h1>}\n   <ul className={css.list}>\n            {filteredContacts.map(({ name, number, id }) => {\n                return (\n                    <li key={id} className={css.item}>\n                        <p className={css.text}>\n                            {name}: {number}\n                        </p>\n                        <button\n                            type=\"button\"\n                            onClick={() => dispatch(contactsAPI.deleteContactThunk(id))}\n                            className={css.listBtn}                            >\n                            Delete</button>\n                    </li>\n                )\n            })}\n            </ul>\n            {error && <h1>Something went wrong: {error.message}</h1>}\n        </div>\n     \n    )\n};\n\nexport default ListUpdate;","import Form from 'components/Form';\nimport Filter from 'components/FilterName/FilterName';\nimport ListUpdate from 'components/ListUpdate';\n\n\nexport default function Contacts() {\n  \n    return (\n        <div>\n        <h1>Contacts</h1>\n            <Form />\n            <Filter/>\n        <ListUpdate/>\n            </div>\n    );\n}"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","useMySelectors","isLoggedIn","useSelector","getIsLoggedIn","user","getUser","isRefreshing","getRefreshing","items","getContacts","filterValue","getFilter","dispatch","useDispatch","useState","name","setName","number","setNumber","nameFormId","numberFormId","handleInput","event","currentTarget","value","console","log","reset","onSubmit","preventDefault","newContact","find","contact","includes","alert","contactsAPI","className","css","htmlFor","type","pattern","title","required","onChange","filter","isLoading","error","useEffect","normalizedFilter","toLowerCase","filteredContacts","useMemo","map","onClick","message","Contacts"],"sourceRoot":""}